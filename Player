import java.awt.image.BufferedImage;
import java.util.ArrayList;

import javax.swing.ImageIcon;

public class Player extends GameObject {

    private ImageIcon[][] icons;
    private int phase;
    private int direction;
    private int phaseCounter;
    private int dx;
    private int dy;

    public Player(int x, int y) {
        super(x, y, true, true);
        this.setSize(32, 36);
        direction = Direction.DOWN;
        phase = 0;
        phaseCounter = 0;
        dx = 0;
        dy = 0;

        icons = new ImageIcon[4][4];

        for (int i = 0; i < icons.length; i++) {
            for (int j = 0; j < icons[i].length; j++) {
                icons[i][j] = new ImageIcon("./character/sprite_" + i + "_" + j + ".png");

            }
        }

        this.setIcon(icons[direction][phase]);

    }

    /**
     * Change direction of the character
     * 
     * @param direction
     */
    public void setDirection(int direction) {
        if (direction < 0 || direction > 3) {
            throw new IllegalArgumentException("int: " + direction + " is invalid.  Must be between 0 and 3 inclusive");
        }
        this.direction = direction;
    }

    public int getDirection(){
        return this.direction;
    }

    /**
     * update the icon to animate the character
     */
    private void updateIcon() {
        if (phaseCounter % 6 == 0) {
            phase = (phase + 1) % 4;
            this.setIcon(icons[direction][phase]);
        }

        phaseCounter++;
    }

    /**
     * reset character in idle position
     */
    public void setIdle() {
        this.setIcon(icons[direction][0]);
        phaseCounter = 0;
    }

    /**
     * set dx for the character to make him move horizontally
     * 
     * @param dx horizontal velocity
     */
    public void setDx(int dx) {
        this.dx = dx;
    }

    /**
     * set dy for the character to make him move vertically
     * 
     * @param dy vertical velocity
     */
    public void setDy(int dy) {
        this.dy = dy;
    }

    /**
     * update the character's location and image based on the dx and dy
     */
    public void update(ArrayList<GameObject> objects) {
        if (dx != 0 || dy != 0) {
            int newX = this.getX() + dx;
            int newY = this.getY() + dy;
            this.setLocation(newX,newY);
            boolean collision = false;
            GameObject object = null;

            for(GameObject obj : objects){
                if(this.hasCollidedWith(obj) && obj.getSolid()){
                    collision = true;
                    object = obj;
                  
                }
            }
            
            if(collision){
                this.setLocation(newX - dx, newY -dy);              
            }
            else{
                this.updateIcon();
            }

            
        }

    }

    @Override
    public void interact() {
     
    }

    
}
