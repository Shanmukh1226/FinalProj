import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.Timer;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Iterator;

/*
 * This class will house all game objects which are part of the
 * simulation. You must add several targets which can be
 * hit by fireballs and removed from the game.
 */

public class GamePanel extends JPanel implements ActionListener  {

    private BufferedImage background;
    private Tree tree;
    private Player player;
    private Axe axe;
    private Wood wood;
    private Rope rope;
    public int count = 0;
    public boolean woodIsAvailable = false;
    private FishingRod rod; 
    
    
    private ArrayList<GameObject> gameObjects;

    /**
     * Construct a game panel and initialize the game
     */                        
    public GamePanel() {
        this.setLayout(null);
        player = new Player(900,600);
        gameObjects = new ArrayList<GameObject>();
        axe=new Axe(700, 600, 20, 20);
        tree = new Tree(350,500,40,40);
        rope = new Rope(850, 70, 20, 20);
        rod = new FishingRod(850, 70, 20, 20);
       
        
        gameObjects.add(new Tree(70,70,40,40));
        gameObjects.add(new Tree(500,500,40,40));
        gameObjects.add(new Tree(670,500,40,40));
        //gameObjects.add(new Tree(400,590,40,40));
        

        gameObjects.add(new Water(0,270,520,120));
        gameObjects.add(new Water(800,270,520,220));
        gameObjects.add(new Water(450,-10,250 ,100));//UpperWater
        gameObjects.add(new Water(300,100,180 ,70));//UpperWater
        gameObjects.add(new Water(930,500,120 ,100));
        gameObjects.add(new Water(930,500,120 ,100));
        gameObjects.add(new Water(570,220 ,380 ,150));

        //gameObjects.add(new Fish(ALLBITS, ABORT, WIDTH, HEIGHT))

        gameObjects.add(new Castle(900, 70, 150, 150));
        //gameObjects.add(new Axe(700, 600, 20, 20));
        gameObjects.add(new Grill(200, 500, 40, 40));
        //gameObjects.add(new Wood(player.getX(),player.getY()+30, 100, 20));
        gameObjects.add(axe);
        gameObjects.add(tree);
        gameObjects.add(rope);
    
        
       URL imageURL = getClass().getResource("./images/Sea/MapWithoutObjectives.png");
        
        try {
           background = ImageIO.read(imageURL);
        } catch (IOException e) {
            e.printStackTrace();
        }

        
        this.add(player);
        for (GameObject object : gameObjects) {
            this.add(object);
        }
       
        this.setFocusable(true);
        this.requestFocusInWindow();
        
        this.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
            
            }

            @Override
            public void keyPressed(KeyEvent e) {
                int code = e.getKeyCode();
                switch (code) {
                    case KeyEvent.VK_W:
                        player.setDy(-5);// moving up
                        player.setDx(0);// horizontal v Vertical mutually exclusive
                        player.setDirection(Direction.UP);
                        break;
                    case KeyEvent.VK_A:
                        player.setDy(0);
                        player.setDx(-5);// moving left
                        player.setDirection(Direction.LEFT);
                        break;
                    case KeyEvent.VK_S:
                        player.setDy(5);// moving down
                        player.setDx(0);// horizontal v Vertical mutually exclusive
                        player.setDirection(Direction.DOWN);
                        break;
                    case KeyEvent.VK_D:
                        player.setDy(0);// moving up
                        player.setDx(5);// horizontal v Vertical mutually exclusive
                        player.setDirection(Direction.RIGHT);
                        break;
                    case KeyEvent.VK_SPACE:
                        for (GameObject object : gameObjects) {
                            treeRemove(object);
                        }
                        break;
                    }                    
                }

            @Override
            public void keyReleased(KeyEvent e) {
                int code = e.getKeyCode();
                switch (code) {
                    case KeyEvent.VK_W:
                        player.setDy(0);
                        player.setIdle();
                        break;
                    case KeyEvent.VK_A:
                        player.setDx(0);
                        player.setIdle();
                        break;
                    case KeyEvent.VK_S:
                        player.setDy(0);
                        player.setIdle();
                        break;
                    case KeyEvent.VK_D:
                        player.setDx(0);
                        player.setIdle();
                        break;
                   
                    
                }
            }
        });

        // create and start the game timer. This gamepanel is passed
        // as the action listener which will be triggered every 17 milliseconds
        Timer gameLoop = new Timer(17, this);
        gameLoop.start();

        this.setFocusable(true);
        this.requestFocusInWindow();
    }
     // render the gamePanel with the background image
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        g.drawImage(background, 0, 0, this.getWidth(), this.getHeight(), this);
        
    }
     
    public void actionPerformed(ActionEvent e) {

        player.setDy(player.getDy());
        player.update();
        
         for (GameObject g : gameObjects) {
            g.update();
        }
        
        player.checkBounds(getWidth(), getHeight());
        for (int i = 0; i < gameObjects.size(); i++) {
            GameObject object = gameObjects.get(i);

            Rectangle bounds = object.getBounds();

            if (player.hasCollidedWith(object)) {
                player.collided(object);    
            }
            repaint(bounds);
        } 
        if(woodIsAvailable && rope.getX() == player.getX() && rope.getY() == player.getY()){
                System.out.println("gotcha");
                remove(wood);
                remove(rope);
                gameObjects.remove(wood);
                gameObjects.remove(rope);
                gameObjects.add(rod);
                add(rod);
        }  
    }
    public void treeRemove(GameObject other){
            double distanceX = other.getX() - axe.getX();
            double distanceY = other.getY() - axe.getY();
            double distance = Math.sqrt(Math.abs((distanceX*distanceX) - (distanceY*distanceY))); 
            if(other instanceof Tree){   
                if(axe.getX() - 25 == player.getX()  && player.getY() == axe.getY() - 10 && distance < 20){
                    remove(other);
                    gameObjects.remove(other);
                    count++;        
                    System.out.println(count);
                }
                if(count == 4){
                    remove(axe);
                    wood = new Wood(player.getX()+50,player.getY()+30, 100, 20);
                    gameObjects.add(wood);
                    add(wood);
                    woodIsAvailable = true;
                } 
            }
        
            System.out.println("rod");
            
    }
    
    public void spacePressed(GameObject obj){
        System.out.println("pressed");
        
    }
   
}

   
   


