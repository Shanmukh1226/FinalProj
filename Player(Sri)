import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import java.awt.Color;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
public class Player extends GameObject{
  private ImageIcon[][] icons;
  private int phase;
  private int direction;
  private int phaseCounter;
  private int dx;
  private int dy;
  BufferedImage img;
  boolean collided;

  public Player(int x, int y){
		super(x,y,true,true);
		this.setSize(35,40);
        collided = false;
		direction = Direction.DOWN;
		phase = 0;
		phaseCounter = 0;
		dx = 0;
		dy = 0;
		icons = new ImageIcon[4][4];
        

		for(int i = 0; i < icons.length; i++){
			for(int j = 0; j < icons[i].length; j++){
				icons[i][j] = new ImageIcon("./images/character/sprite_" + i + "_" + j + ".png");
			}
		}
		this.setIcon(icons[direction][phase]);
	}

	public void collided(GameObject other){
        Rectangle myHitBox = this.getHitBox();
        Rectangle otherHitBox = other.getHitBox();
        Rectangle sea = other.getHitBox();

        if(other instanceof Castle || other instanceof Grill || other instanceof Water || other instanceof Tree){
            int myBottom = myHitBox.y + myHitBox.height;
            int myTop = myHitBox.y;
            int myLeft = myHitBox.x;
            int myRight = myHitBox.x + myHitBox.width;
            
            int otherBottom = otherHitBox.y + otherHitBox.height;
            int otherTop = otherHitBox.y;
            int otherLeft = otherHitBox.x;
            int otherRight = otherHitBox.x + otherHitBox.width;

            if (myBottom > otherTop  && dy > 0) {
                System.out.println(dy);
                this.setDy(0);
                this.setLocation(this.getX(), otherTop - this.getHeight());
            }
            else if (myTop < otherBottom && dy<0) {
                System.out.println(dy);
                this.setDy(0);
                this.setLocation(this.getX(), otherBottom );
            }
            else if (myRight > otherLeft && myLeft < otherLeft && (dx > 0 || dy > 0)) {
                this.setDx(0);
                this.setLocation(otherLeft - this.getWidth(), this.getY());
            }
            else if (myLeft < otherRight && myRight > otherRight && (dx < 0 || dy < 0)) {
                this.setDx(0);
                this.setLocation(otherRight, this.getY());
            }
        }
        else if(other instanceof Rope || other instanceof Wood){
            other.setLocation(getX(), getY());
        }
        else if(other instanceof Axe){
            other.setLocation(getX() + 25, getY() + 10);
        }
        else if(other instanceof FishingRod){
            other.setLocation(getX()+25, getY()+10);
        }
        
	}
   

   

	public void setDirection(int direction){
		this.direction = direction;
	}

	public int getDirection(){
		return direction;
	}

	private void updateIcon(){
		if (phaseCounter % 6 == 0) {
          phase = (phase + 1) % 4;
          this.setIcon(icons[direction][phase]);
    }

    phaseCounter++;
  }

	public void setIdle(){
		this.setIcon(icons[direction][0]);
		phaseCounter = 0;
	}

	public void setDx(int dx){
		this.dx = dx;
	}
	public void setDy(int dy){
		this.dy = dy;
	}
	public int getDy(){
        return dy;
    }
    public int getDx(){
        return dx;
    }

	public void update(){
		if(dx != 0 || dy != 0){
			this.setLocation(this.getX() + dx, this.getY() + dy);
			this.updateIcon();
	}
    }
    public void checkBounds(int width, int height) {
        if (this.getX() < 0) {
            this.setLocation(0, this.getY());
        }
        if (this.getX() + this.getWidth() > width) {
            this.setLocation(width - this.getWidth(), this.getY());
        }
        if (this.getY() + this.getHeight() > height) {
            this.setLocation(this.getX(), height - this.getHeight());
        }
    }
}



